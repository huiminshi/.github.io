{"meta":{"title":"Aviva","subtitle":"","description":"","author":"Aviva","url":"http://yoursite.com","root":"/"},"pages":[{"title":"archives","date":"2020-03-25T09:25:12.000Z","updated":"2020-03-25T09:25:12.924Z","comments":true,"path":"archives/index.html","permalink":"http://yoursite.com/archives/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2020-03-25T09:23:06.000Z","updated":"2020-04-01T06:18:37.617Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2020-03-25T09:25:28.000Z","updated":"2020-03-25T09:25:28.199Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2020-03-25T09:25:21.000Z","updated":"2020-04-01T06:20:13.456Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JS📝 全局对象与函数对象","slug":"JS-全局对象与函数对象","date":"2020-04-01T06:03:27.000Z","updated":"2020-04-01T06:07:39.107Z","comments":true,"path":"2020/04/01/JS-全局对象与函数对象/","link":"","permalink":"http://yoursite.com/2020/04/01/JS-%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"全局对象浏览器环境下为 window，Node.js 环境下为 global。目前 JS 中新添加了 globalThis 作为全局对象的标准名称，但有些浏览器还不能兼容。 可以使用全局对象来测试对现代语言功能的支持。 函数对象函数本质是一个对象，所以可以进行增/删属性，按引用传递等操作。 name 属性 如果函数本身没有函数名，那么会通过上下文命名推测一个函数名，如果实在不知道具体的函数名，那么会返回空； 🌰 1234let sayHi = function() &#123; alert(\"Hi\");&#125;;alert(sayHi.name); // sayHi（有名字！） length 属性 可以返回函数的参数长度，但是 rest 参数不会被计算在内；可以利用 length 属性实现多态性，即根据参数的类型或者具体情况下参数的个数来做不同的处理； 自定义属性 🌰 自定义 counter 属性来记录函数调用次数 12345678910function sayHi() &#123; alert(\"Hi\"); sayHi.counter++;&#125;sayHi.counter = 0; // initial valuesayHi(); // HisayHi(); // Hialert( `Called $&#123;sayHi.counter&#125; times` ); // Called 2 times 函数属性不是一个变量，以上例子中不会再函数内定义一个局部变量 counter，所以函数属性与变量是两个不相关的东西，即它不会对函数的执行产生影响。 函数属性可以被用来替代闭包，因为通过闭包的方式从某个函数内部传递出来的变量无法被这个函数外部的环境所修改，利用函数属性的话可以解决这一问题。（见闭包笔记） 在很多 JS 库中都充分利用了自定义属性，例如：jQuery 库创建了一个名为 $ 的函数和 lodash 库中的 _ 函数，然后为它们添加属性，例如 _.add、_.keyBy 等，这样一个库就只会有一个全局变量，可以减少对全局空间的污染，降低了命名冲突的可能性。 命名函数表达式 NFE 语法： 1let sayHi = function func() &#123;...&#125; NFE 依旧是一个函数表达式，为它添加 func 不能使它变为函数声明，它仍然是作为赋值表达式中的一部分被创建的。 NFE 特点： 它允许函数在内部引用自己。 它在函数外不可见。 🌰 使用场景 12345678910111213let sayHi = function func(who) &#123; if (who) &#123; alert(`Hello, $&#123;who&#125;`); &#125; else &#123; //sayHi(\"Guest\");//这样是无法使用，因为外部将 sayHi 设为了 null func(\"Guest\");//这样可正常操作 &#125;&#125;;let welcome = sayHi;sayHi = null; // 外部修改了 sayHiwelcome(); // Hello, Guest（嵌套调用有效） NFE 相对于普通的函数表达式来说，给函数添加了一个可选的名字（如：func ），这个名字是对外不可见的，即外部无法修改它。 在不使用 NFE 的情况下，如果想要在函数内部引用自己，则需要调用外部的函数变量名（ sayHi ），但这个外部的函数名是可以被外部修改的，那么可能会造成它被修改后无法正常调用的情况；NFE 可以解决这个问题，因为它所添加的函数名对外不可见，只处在这个函数内部的，所以可以解决这个问题。 函数声明没有内部名这样的特性。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"JS📝 继承","slug":"JS-继承","date":"2020-03-28T06:44:54.000Z","updated":"2020-04-01T06:33:28.956Z","comments":true,"path":"2020/03/28/JS-继承/","link":"","permalink":"http://yoursite.com/2020/03/28/JS-%E7%BB%A7%E6%89%BF/","excerpt":"","text":"原型链继承 方法：本质是重写子类的原型对象，这个原型对象是通过创建父类的实例，并赋值给子类的原型对象实现的。 即：Child.prototye = new Parent(); 缺点：1. 引用类型的属性会被所有实例所共享；2. 在创建Child实例时不能向 Parent 传参 注意：原型链继承时不能使用对象字面量创建原型方法，这样会重写原型链，导致继承的代码无效。 实现 1234567891011121314151617181920212223 function Parent() &#123; this.name = 'shm'; this.hobbies = ['swimming','singing']; &#125;Parent.prototype.getName = function() &#123; console.log(this.name);&#125;function Child()&#123;&#125;Child.prototype = new Parent();//实现继承//注意：不能使用对象字面量添加原型方法（如下），上面继承的语句会失效//Child.prototype = &#123;// getHobbies： function()&#123;...&#125;//&#125;//测试var child1 = new Child();child1.hobbies.push('aaa');child1.name = 'aviva';//child1新添加了一个name属性console.log(child1.hobbies);//[ 'shopping', 'swimming', 'aaa' ]console.log(child1.name);//avivavar child2 = new Child();console.log(child2.hobbies);//[ 'shopping', 'swimming', 'aaa' ]console.log(child2.name);//shm，child2中本身没有，去原型对象中获得的值 构造函数继承（借用 call/apply 函数/伪造对象/经典继承） 方法：在子类构造函数中通过 call/apply 调用父类构造函数 function SubType(){ SuperType.call(this);}//继承了SuperType 优点：1. 避免了引用类型的值被所有实例共享；2. 可以在子类中向父类传参（通过call/apply） 缺点：1. 不能继承父类原型中定义的方法；2. 方法都在构造函数中定义，每次创建实例都会重新创建一遍，浪费内存。 实现: 1234567891011121314151617function Parent(name) &#123; this.name = name; this.hobbies = ['shopping','swimming'];&#125;function Child(name) &#123; Parent.call(this,name);//在子类构造函数里调用父类构造函数， // 所以继承了父类的name属性，但是由于更改了this，所以Parent里的this指向每个child实例 //因此每个实例都会有自己的属性副本&#125;var child1 = new Child('shm');child1.hobbies.push('aaa');console.log(child1.hobbies);//[ 'shopping', 'swimming', 'aaa' ]console.log(child1.name);//shmvar child2 = new Child('aviva');console.log(child2.hobbies);//[ 'shopping', 'swimming' ]console.log(child2.name);//aviva 组合继承（伪经典继承：原型链+构造函数继承） 方法：通过原型链继承父类原型对象的属性和方法，通过构造函数继承父类构造函数内的属性。 12345function Child(name,age) &#123; Parent.call(this,name);//构造函数继承，这里继承了name属性 this.age = age;&#125;Child.prototype = new Parent();//原型链继承；第一次调用父类构造函数：设置类型实例的原型的时候 优点：使每个子类实例分别拥有自己的属性，又可以使用相同的方法。融合了原型链继承和构造函数的优点，是最常用的继承方法 缺点：1. 调用了两次父类构造函数（一次使设置子类原型的时候，另一次使创建子类实例的时候）-&gt; 会有两组父类构造函数的属性（一组在子类原型上，一组在子类实例中）；2. 父类原型和子类原型是同一个对象，无法区分子类实例真正由谁构造。 实现 1234567891011121314151617181920212223242526272829function Parent(name) &#123; this.name = name; this.hobbies = ['shopping','swimming'];&#125;Parent.prototype.getName = function () &#123;//通过原型链共享的方法 console.log(this.name);&#125;;function Child(name,age) &#123; Parent.call(this,name);//构造函数继承，这里继承了name属性 this.age = age;&#125;Child.prototype = new Parent();//原型链继承；第一次调用父类构造函数：设置类型实例的原型的时候Child.prototype.constructor = Child;//测试var child1 = new Child('shm','18');//第二次调用父类构造函数：创建子类实例的时候child1.hobbies.push('singing');console.log(child1.name);//shmconsole.log(child1.age);//18console.log(child1.hobbies);//[ 'shopping', 'swimming', 'singing' ]child1.getName();var child2 = new Child('aviva','20');console.log(child2.name);//avivaconsole.log(child2.age);//20console.log(child2.hobbies);//[ 'shopping', 'swimming' ]child2.getName();//父类原型和子类原型是同一个对象，无法区分子类实例真正由谁构造。console.log(child1 instanceof Parent);//trueconsole.log(child1 instanceof Child);//true 原型式继承 方法：通过Object.create(o)实现，将传入的o对象作为其它对象创建的基础，即o作为新创建对象的原型，本质上就是对o进行一层浅拷贝。且必须有一个对象作为基础。 123456//Object.create的模拟实现function createObj(o)&#123; function F()&#123;&#125;; F.prototype = o; return new F();&#125; 缺点：和原型（链）继承一样，包含引用类型的属性始终都会共享相应的值 实现 12345678910111213141516171819202122function createObj(o) &#123; function F() &#123;&#125; F.prototype = o; return new F();&#125;//person是其它对象创建的基础var person = &#123; name: 'shm', friends: ['daisy', 'kelly']&#125;;var person1 = createObj(person);//或者用Object.create(person)var person2 = createObj(person);console.log(person1);//&#123;&#125; 虽然打印为空对象，但是可以通过原型链找到name和friends属性person1.name = 'person1';console.log(person1.name);//person1console.log(person2.name);//shmconsole.log(person1);//&#123; name: 'person1' &#125;//这里person1和2的name不同不是因为他们具有独立的name，而是因为给person1添加了name，并非修改了原型的nameperson1.friends.push('taylor');console.log(person1.friends);//[ 'daisy', 'kelly', 'taylor' ]console.log(person2.friends);//[ 'daisy', 'kelly', 'taylor' ] 寄生式继承 方法：创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象（给对象添加新的属性/方法），最后返回对象 12345678function createObj(o)&#123; let clone = Object.create(o); //在这里做增强对象 clone.sayHi = function()&#123; console.log('Hi'); &#125; return clone;&#125; 缺点：与借用构造函数继承一样，函数不能复用；与原型链/原型式继承一样，引用类型的属性会被共享 实现 12345678910111213141516171819function createObj(o) &#123; var clone = Object.create(o); clone.sayName = function () &#123; console.log('hi'); &#125;; return clone;&#125;var person = &#123; name: 'shm', friends: ['daisy', 'kelly']&#125;;var person1 = createObj(person);var person2 = createObj(person);person1.name = 'aviva';person1.friends.push('aaa');console.log(person1.name);//avivaconsole.log(person2.name);//shmconsole.log(person1.friends);//['daisy', 'kelly','aaa']console.log(person2.friends);//['daisy', 'kelly','aaa'] 寄生组合式继承（最优） 方法：在组合继承的基础上，子类继承一个由父类原型生成的空对象。用 inheritPrototype 方法替代组合继承中SubType.prototype = new SuperType() 12345function inheritPrototype(SubType,SuperType)&#123; let prototype = Object.create(SuperType.prototype);//创建父类原型的一个副本 prototype.constructor = SubType;//为创建的副本添加constructor属性，弥补因重写原型而失去的默认的constructor属性 SubType.prototype = prototype;//将新创建的对象（即副本）赋值给子类的原型&#125; 优点：1. 只调用了一次父类构造函数，并且因此避免了在子类原型上面创建不必要的多余的属性；2. 原型链保持不变，因此可以正常使用 instanceof 和 isPrototypeOf 实现 12345678910111213141516171819202122function Parent(name) &#123; this.name = name; this.hobbies = ['shopping','swimming'];&#125;Parent.prototype.getName = function () &#123; console.log(this.name);&#125;;function Child(name,age) &#123; Parent.call(this,name);//借用构造函数继承 this.age = age;&#125;function inherits(child,parent) &#123; child.prototype = Object.create(parent.prototype,&#123; constructor: &#123; value: child &#125; &#125;)&#125;inherits(Child,Parent);var child1 = new Child('shm','18');console.log(child1);//子类实例上只有name，hobbies和age属性，方法在Parent原型上，子类原型上没有 Class 继承12345678910111213141516class Parent &#123; constructor(value) &#123; this.val = value &#125; getValue() &#123; console.log(this.val) &#125;&#125;class Child extends Parent &#123; constructor(value) &#123; super(value) &#125;&#125;let child = new Child(1)child.getValue() // 1child instanceof Parent // true class 实现继承的核心在于使用 extends 表明继承自哪个父类，并且在子类构造函数中必须调用 super，因为这段代码可以看成 Parent.call(this, value)。 class 创建的函数必须要用 new 关键词实现，它内部有特殊的内部属性[[FunctionKind]]:&quot;classConstructor&quot;；类方法不可枚举，类定义将 &quot;prototype&quot; 中的所有方法的 enumerable 标志设置为 false。；类总是使用严格模式。 如果要重写 constructor，那么必须要先调用 super 来完成 this 的赋值，因为在class 的情况下 this 赋值要由非派生类实现。这是由于派生的构造函数具有特殊的内部属性 [[ConstructorKind]]:&quot;derived&quot;。 📖：高程三，其他（忘了）","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"JS📝 循环方法对比","slug":"JS-循环方法对比","date":"2020-03-28T06:44:54.000Z","updated":"2020-04-01T06:08:25.223Z","comments":true,"path":"2020/03/28/JS-循环方法对比/","link":"","permalink":"http://yoursite.com/2020/03/28/JS-%E5%BE%AA%E7%8E%AF%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94/","excerpt":"","text":"循环方法包括：for，for...in, for...of，forEach。 for...in 是用于遍历一个对象中所有可枚举的属性或索引，包括继承的属性，可以被用于数组，字符串和普通对象，不可用于 Map 和 Set 对象（因为这两个对象是可迭代对象），数组不推荐使用这个，速度会下降 10-100 倍；如果不想访问继承的属性，可改用 Object.hasOwnProperty()。 for...of 被用于遍历可迭代对象的值而不是属性/索引，实际上是在遍历具有 Symbol.iterator 属性的成员。可以被用于数组，字符串，Map 和 Set 对象，不可用于普通对象。 forEach() 则是 Array 原型中的方法，允许我们迭代数组的元素，可同时获得 value 和 index，只可用于数组。forEach 适用于循环次数未知，或者计算循环次数比较麻烦情况，不可通过 continue/break 来控制循环。forEach 的返回值总是 undefined。且不会对未初始化的值进行任何操作（稀疏数组情况）。 📖：What is the difference between JavaScript’s for…in, for…of and forEach?","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"JS📝 装饰者模式与转发","slug":"JS-装饰者模式与转发","date":"2020-03-28T06:44:54.000Z","updated":"2020-04-01T06:07:47.511Z","comments":true,"path":"2020/03/28/JS-装饰者模式与转发/","link":"","permalink":"http://yoursite.com/2020/03/28/JS-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E4%B8%8E%E8%BD%AC%E5%8F%91/","excerpt":"","text":"装饰者模式 Decorators🌰 缓存装饰者 假设我们有一个 CPU 重负载的函数 slow(x)，但它的结果是稳定的。换句话说，对于相同的 x，它总是返回相同的结果。 如果经常调用该函数，我们可能希望将结果缓存（记住）下来，以避免在重新计算上花费额外的时间。 12345678910111213141516171819202122232425262728let worker = &#123; someMethod() &#123; return 1; &#125;, slow(x) &#123; // 可怕的 CPU 过载任务 return x * this.someMethod(); // (*) &#125;&#125;;function cachingDecorator(func) &#123; let cache = new Map(); return function(x) &#123; if (cache.has(x)) &#123; return cache.get(x); &#125; let result = func(x); // (**) cache.set(x, result); return result; &#125;;&#125;alert( worker.slow(1) ); // 原始方法有效worker.slow = cachingDecorator(worker.slow); // 现在对其进行缓存alert( worker.slow(2) ); // 出错 这里的 cachingDecorator 是一个装饰者（decorator）：接收另一个函数并改变它的行为。其思想是，我们可以为任何函数调用 cachingDecorator，它将返回缓存包装器，即内部返回的函数是一个包装器（wrapper）。 这个包装器并不改变传入的 func 的操作，只是在它的行为之上添加了缓存功能。 以上方法在调用是会报错，简化上面的程序进行分析： 12345678910111213function cachingDecorator(func) &#123; //... return function(x) &#123; //... console.log(this);// (1) let result = func(x); // (2) //... return result; &#125;;&#125;worker.slow = cachingDecorator(worker.slow); alert( worker.slow(2) ); (1) : 为 worker，这是因为这个 function 赋值给了 worker.slow，在通过 worter.slow() 调用时，this 指向 worker； (2)：等于let result = worker.slow(x); 但是由于这里进行了赋值操作，将中间的引用类型 (worker,&#39;slow&#39;,false) 抛弃了，所以丢失了原来的 this 值，故此时的 this 指向 window 修正：将 let result = func(x); 修改为 let result = func.call(this,x)；即可正常工作。 装饰者的问题 如果被装饰的函数（ slow ）具有任何属性，而装饰后的函数则将不再具有这些属性，即 cachingDecorator(slow) 则是一个没有这些属性的包装器。 这个问题可以通过 Proxy 对象来包装函数，通过 Proxy 包装的装饰者可保留对函数属性的访问权限。 呼叫转移将所有参数连同上下文一起传递给另一个函数被称为“呼叫转移（call forwarding）。通常使用 apply 来完成。 123let wrapper = function() &#123; return original.apply(this, arguments);&#125;; 方法借用对于函数的 arguments 来说，它既是可迭代对象又是类数组，但是由于不是真正的数组，所以不能直接调用数组方法，例如： arguments.join() 。此时可以使用方法借用来解决。 [].join.call(arguments)，即从常规的数组中借用 join 方法，并使用 [].join.call 在 arguments 的上下文中运行它。 解释：arr.join() 方法会利用 this 将 arr 拼接成字符串，通过 this[0] 然后拼接逗号的方式依次将整个数组拼接完成。所以改变 this = arguments 可以将 arguments 拼接起来。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"JS📝 闭包","slug":"JS-闭包","date":"2020-03-28T06:44:54.000Z","updated":"2020-04-01T06:20:40.969Z","comments":true,"path":"2020/03/28/JS-闭包/","link":"","permalink":"http://yoursite.com/2020/03/28/JS-%E9%97%AD%E5%8C%85/","excerpt":"","text":"词法环境 Lexical Environment变量所有运行的 function、代码块 {...} 和整个脚本内部都有一个隐藏的关联对象——词法环境。 词法环境对象包括两部分： 环境记录（Environment Record） —— 一个存储所有局部变量作为其属性（包括一些其他信息，例如 this 的值）的对象。 对 外部词法环境 的引用，与外部代码相关联。 A “variable” is just a property of the special internal object, Environment Record. “To get or change a variable” means “to get or change a property of that object”. 一个“变量”实际上只是环境记录器的一个属性。获取或修改这个变量意味着获取或修改这个对象的属性。 词法环境仅仅是一个规范对象，不是实际存在的无法在代码中获取与操作，主要用于描述事物如何运作的对象。 栗子🌰 左侧是一个全局代码，右侧是一个词法环境对象，方格表示环境记录，outer 表示外部引用。 当脚本开始运行，词法环境预先填充了所有声明的变量。 最初，它们处于“未初始化（Uninitialized）”状态。这是一种特殊的内部状态，这意味着引擎知道变量，但是不允许在 let 之前使用它。几乎就像变量不存在一样。 然后 let phrase 定义出现了。还未被赋值，值为 undefined。从这刻起，就可以使用这个变量。 phrase 被赋予了一个值。 phrase 的值被修改。 函数声明函数也是一个变量，不同的是，只要词法环境被创建，函数声明会立即变为可用的函数，即立即被初始化，所以可以在函数定义之前就使用它。 🌰 但这不适用于函数表达式的形式，即 let say = function(name)... 这种方式于变量的情况一致。 内部与外部词法环境当一个函数被调用时，会创建一个新的词法环境用以存储这个调用的局部变量和参数。 🌰 此时有两个词法环境：内部一个（用于函数调用）和外部一个（全局）。内部词法环境引用了 outer。 当代码要访问一个变量时 —— 首先会搜索内部词法环境，然后搜索外部环境，然后搜索更外部的环境，以此类推，直到全局词法环境。 如果在任何地方都找不到这个变量，那么在严格模式下会报错，在非严格模式下，为了向后兼容，则会在全局环境创建一个未赋值的变量。 返回函数🌰 此时有两个词法环境，一个全局词法环境，一个是 makeCounter() 被调用时产生的。 所有的函数都有一个内置属性 [[Environment]]，这个属性指向创建这个函数的词法环境。即 Counter.[[Environment]] 指向 {count: 0} 词法环境。 当调用 counter() 时，会为该调用创建一个新的词法环境，并且根据 counter.[[Environment]] 获取到它的外部词法环境引用。 并且在变量所在的词法环境中修改变量的值。 闭包 Closure闭包是指内部函数总是可以访问它所在的外部函数中声明的变量和参数，即使在它外部函数被返回之后。在 JS 中除 new Function 语法外的所有函数都是天生闭包。 这是因为 JavaScript 中的函数会自动通过隐藏的 [[Environment]] 属性记住它们被创建的位置，所以它们都可以访问外部变量。 在 JS 中用 new Function 创建的函数的 [[Environment]] 属性指向的是全局词法环境，而不是函数所在的外部词法环境。因此，不能在 new Function 中直接使用外部变量，需要显式地参数传值，这样可以降低代码出错的可能，避免了使用压缩程序而产生冲突的问题。 优点： 闭包可以突破作用域链的限制，将函数内部的变量和方法传递到外部； 避免全局变量的污染； 缺点： 常驻在内存中，增加了内存的使用量； 虽然闭包可以突破作用域链传到外部，但是这样传出来的变量不能被修改，这一问题可以通过函数属性来解决（如下）。 如果变量位于外层的函数中，那么这个变量只能被这个函数和这个函数内部嵌套的函数修改，外部的函数无法修改它。此时可以通过利用函数属性，即将变量绑定到函数上，那么外部就也可以修改了。 🌰 count 只可以被 makeCounter 和内部的函数修改 12345678910111213function makeCounter() &#123; let count = 0; return function() &#123; return count++; &#125;;&#125;let counter = makeCounter();alert( counter() ); // 0alert( counter() ); // 1alert( counter() ); // 2 使用函数属性来代替闭包。 12345678910function makeCounter() &#123; function counter() &#123; return counter.count++; &#125; counter.count = 0; return counter;&#125;let counter = makeCounter();counter.count = 10;alter( counter() );//10 垃圾回收 Garbage collection通常，函数调用完成后，会将词法环境和其中的所有变量从内存中删除。与 JavaScript 中的其他对象一样，词法环境仅在可达时才会被保留在内存中。 但是，如果某个函数在执行结束后，它的这个词法环境仍然被引用，即依旧可达，那么它依旧会存在再变量中。 🌰 12345678910function f() &#123; let value = 123; return function() &#123; alert(value); &#125;&#125;let g = f(); // g.[[Environment]] 存储了对相应 f() 调用的词法环境的引用g = null;// 此时 f() 的词法环境不再被引用，即可被垃圾回收机制回收 理论上当函数可达时，它外部的所有变量也都将存在。但实际上，JS 引擎进行了进一步的优化，JS 引擎会分析变量的使用情况，如果这个变量明显不会被使用，那么也会被移除。因此，这类变量在 V8（Chorm/Oprea） 中调试时将不可用。 📖：Variable Scope","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"JS📝 变量与常量","slug":"JS-变量与常量","date":"2020-03-27T11:38:17.000Z","updated":"2020-04-01T06:08:54.882Z","comments":true,"path":"2020/03/27/JS-变量与常量/","link":"","permalink":"http://yoursite.com/2020/03/27/JS-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/","excerpt":"","text":"var var 只有函数作用域和全局作用域，没有块级作用域，因为在旧版的 JS 中块时没有词法环境的； var声明会发生变量提升（hoisting），即提升到脚本/函数顶部，但是 var 的赋值操作不会被提升，依旧保留在原来的位置； var 声明的全局函数和变量会成为全局对象的属性。 let 作用域是块级作用域（之前只有函数作用域和全局作用域） 不存在变量声明提前 （在let之前使用，会报错 is not defined） 不可以重复定义 （var可以，不会报错，但是let 会说has already been declared) 存在暂时性死区 在一个块级作用域中，变量唯一存在，一旦声明了一个，就属于这个块级作用域，不受外部的影响 本质就是：只要已进入当前作用域，所要用的变量就已经存在了，但是不可以获取，只要等到声明变量那行开始才可以获取使用 意义：标准化代码，将所有的变量声明放在最前面 123456var a=1;if(1)&#123; console.log(a); let a=2;&#125;//cannot access 'a' before initialization const 一般用来声明常量，不允许修改 只读属性，声明同时就要赋值 和let一样，都是块级作用域，存在暂时性死区，没有变量声明提前，不允许重复定义 存储位置var 定义的变量存储在作用中全局变量（Global）中（也就是window）。 let定义的变量存储在于global同级的这个script的这个域中。 IIFE 立即执行函数IIFE 是为了解决 var 没有块级作用域的问题提出的办法，IIFE 的函数表达式会被括号 (function {...}) 包裹起来。这样的书写方式是因为在 JS 中函数声明必须要有函数名，同时 JS 不允许立即调用函数声明。 因此利用圆括号把告函数表达式包起来，以告诉 JavaScript，这个函数是在另一个表达式的上下文中创建的，它是一个函数表达式：故它不需要函数名，可以立即调用。 🌰 多种 IIFE 的书写方式： 123456789101112131415(function() &#123; alert(\"Parentheses around the function\");&#125;)();(function() &#123; alert(\"Parentheses around the whole thing\");&#125;());!function() &#123; alert(\"Bitwise NOT operator starts the expression\");&#125;();+function() &#123; alert(\"Unary plus starts the expression\");&#125;();","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]}]}